#+title: coups - Pecking üêî at Containers for UPS Products


* What is in the coups?

The *coups* package provides tools to query and perform operations on
UPS "products" and sets of products called "manifests".

With the ~coups~ command you can (or will be able to):

- [X] Download and store a manifest or a bundle of manifests to a
  local DB.

- [X] List products or manifests matching given identifiers.

- [X] List products that are in a given manifest.

- [X] List manifests that provide a given package.

- [X] Factor manifests into subsets defined by other manifests.

- [X] Visualize a product-manifest dependency graph.

- [X] Render information into scripts to automate building of
  containers which are layered according to manifest subsets.

- [X] Download product tar files or generate them from installed UPS
  product directories.

- [ ] +Determine product-product dependency graph.+

- [ ] +Generate manifest based on product-product dependencies.+

- [ ] +Add container layers based on local sets of product tar files.+

* Just let me type something

1. Visit https://scisoft.fnal.gov/scisoft/bundles/

2. Click on:
   - a bundle link, then
   - a version link, then
   - the ~manifests~ link

3. Select (copy) a manifest file name for use as ~<paste>~ below and
   noting how the name is composed of parts:
   - ~<bundle>~
   - ~<version>~
   - ~<flavor>~
   - ~<quals>~

4. Load, interrogate, render, build:

#+begin_example
$ coups load-manifest <paste>
$ coups subsets <paste>
$ coups container -o build.sh <paste>
$ bash build.sh
#+end_example

5. Run

#+begin_example
$ docker image ls
$ docker run -ti brettviren/coups-<bundle>:<version>-<flavor>-<quals> bash
[root@0f962f05e7fa /]# source /products/setup
[root@0f962f05e7fa /]# ups list -aK+
[root@0f962f05e7fa /]# setup <package> <vunder> -q <quals>
#+end_example

But, please take note of the following:

- It's not so great to run stuff as root, even inside a container.
  More likely you will want to cap off your container with another
  layer of customization or export it to a Singularity image.

- In making this we were okay with what ~coups subsets~ showed us.  If
  that did not look "good" then some arguments are needed to control
  how the subsets are formed.  (See [[file:examples.org]])

* Taxonomy

*coups* follows the taxonomy expressed in scisoft server's organization.
There are two primary taxons:

- product :: identifies an "instance" of a UPS package

- manifest :: identify a set of products collected into a cohesive suite

Both a *product* and a *manifest* are fully identified by providing four
types of information.

- name :: a simple, short name

- version :: a version string

- flavor :: label encoding an ABI 

- qualifiers :: a set of tags 

** Some taxonomy details

- The *name* of a *manifest* on scisoft is a *bundle*.  A list of
  bundles is available here: https://scisoft.fnal.gov/scisoft/bundles/

- The *name* of a *product* on scisoft is a *package*.  A list of packages
  is available here: https://scisoft.fnal.gov/scisoft/packages/

- In ~coups~ we say *version* when the string takes a numeric ~X.Y.Z~ form
  and *vunder* when it takes a form ~vX_Y_Z~.  

- Both *product* and *manifest* have an associated *filename*.  For a
  product it names a tar file which holds its contents.  For a
  manifest it names the file containing the list of products with
  extension ~_MANIFEST.txt~.

- There is always a *flavor* but it may be "source" or "NULL" when
  referring to either a source distribution or a binary which has no
  platform distinction (eg, data).

- The set of qualifier tags indicate some manner of variant build.
  Eg: the compiler code ~e20~ (gcc) vs ~c7~ (clang) or ~prof~ for profiling
  (debug+optimized) vs ~debug~ for just debug.


* Examples

See [[file:examples.org]] for a long list of example usage.

* Problems to watch out for with UPS and Scisoft

Here, lists some of problems that may be encountered when working with
~coups~ and Scisoft manifests.  

1. Manifests may not list strictly all dependencies which are
   expressed in UPS table files of the products that they do list.  In
   some cases this is due to an "optional" requirement which is not
   made available.  In others it can simply be bugs in the manifest.
   Missing requirements will become apparent when one does a UPS ~setup~
   in the container.

2. Manifest files may have malformed lines.  These are seen typically
   as an omission of flavor and quals info.  ~coups~ will attempt to fix
   these mistakes by parsing and interpreting the given product ~tar~
   file name and applying some heuristics gleaned from practical
   usage.

3. Scisoft indices may not always be up to date.  A product tar file
   may actually be uploaded and exist on Scisoft.  The indices should
   be rebuilt automatically as a result of the upload but this has
   been known to fail.

If you suspect you may be experiencing these problems you can contact
the Scisoft team or the person in charge of your experiment's
manifests (or me).
